*Para filtrar por categorías el fakestoreapi, ir a la parte de "Get all categories"

Esta clase vamos  desarrollar Contador que es hijo de ItemDetail
(cómo pasar props de un componente hijo a un componente padre)

Entonces creó una carpeta "eventos" paralela a public y src:
 *Dentro creó el index.html y app.js 

 (1h20' aprox) Explicación del preventDefault: que lo que hace es seguir tomando los console.logs pero no toma el efecto que produce la etiqueta (ejemplo, si es un link, no te lleva donde dice el link; o con un onKeyDown, no te deja escribir si le haces preventDefault- en el input no te muestra nada escrito-, pero en consola lo detecta.)

* target: elemento original que te dispara el evento

* stopPropagation: tiene que ver con el concepto de propagación de eventos
    Los eventos en JS se propagan a través del DOM

Para nuestro caso:
    PADRE: ItemDetail (tiene que tener una función y se la tiene que pasar al hijo)
        Según el desafío, la función que tenemos que pasar es onAdd
        Además hay que pasarle el stock e initial
    HIJO: Contador
        Del hijo nos interesa pasar al padre el estado del contador, que es la cantidad que el cliente quiere comprar
        (es lo único que necesito del hijo)
        Entonces dentro del const onAdd del ItemDetail, pongo cantidadSeleccionada

    Desafío: cdo itemCount emita un evento "click" en su botón, debés ejecutr el callback onAdd y le pasarás como parámetro el número conseguido en el contador.
    Una vez que consigas el número, lo guardás en un estado En la clase09 hicimos hasta la parte de recibir el nro.
    Entonces faltaría: agarrar ese valor y guardarlo en un estado. Se guarda en el estado la cantidadSeleccionadaque vino del hijo.
    Luego con ese estado ya puedo saber si es undefined o es un nro.
        Si es undefined no hago nada
        Si llega  ser un nro, el contador debe desaparecer. (ver si se puede usr el display:none)

AFTERCLASS - TUTOR ERIC

* TEMA 1: useParams
    Sirve para que cuando nosotros declaramos la ruta en el App.js, dentro del Route, cuando ponemos los ":" quiere decir que lo que pongamos luego va a ser dinámico.
    Ej: /category/:id 
    Y el nombre que le demos a eso (en este caso idCategoria), es lo que vamos a capturar con el hook useParams
    Después en el itemListContainer lo capturo con const (idCategoria)=useParams()
    
    Lo que pedía el desafío era tener dentro de ITemDetail, una función (onAdd), pero cuyo onClick esté en el contador.
    Pide guardar "cantidadSeleccionada" en un estado local (entonces yo debería tener un useState con un estado), y a partir de ese estado mostrar o no el contador ItemCount.
    Ahí fue que desarrollo: const [cantidadSeleccionada, setCantidadSeleccionada] =useState(0)

    Y luego: 
        De este modo, estoy guardando en un estdo local de este componente, el nro que me llega desde el contador.
    (30')